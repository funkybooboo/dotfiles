#!/usr/bin/env bash

set -euo pipefail

# ─── 0) Check required commands ──────────────────────────────────────────────
for cmd in gh git curl jq rclone flock sudo; do
    command -v "$cmd" >/dev/null 2>&1 || {
        echo "Error: '$cmd' not found." >&2
        exit 1
    }
done

# ─── 1) Load & export tokens ─────────────────────────────────────────────────
if [[ -f "${HOME}/.tokens" ]]; then
    set -a
    source "${HOME}/.tokens"
    set +a
else
    echo "Error: ~/.tokens not found." >&2
    exit 1
fi
: "${GH_TOKEN:?need GH_TOKEN in ~/.tokens}"
: "${GITLAB_TOKEN:?need GITLAB_TOKEN in ~/.tokens}"

# ─── 2) Prevent overlapping runs & fix ownership ──────────────────────────────
BACKUP_DIR="${HOME}/backups/github"
mkdir -p "$BACKUP_DIR"
echo "  → Fixing backup-dir ownership (requires sudo)…"
sudo chown -R "$(id -un):$(id -gn)" "$BACKUP_DIR"
sudo chmod -R u+rwX "$BACKUP_DIR"

LOCKFILE="${BACKUP_DIR}/backup-github.lock"
exec 200>"$LOCKFILE"
flock -n 200 || {
    echo "Already running; exiting."
    exit 0
}

# ─── 3) Verify Proton remote ─────────────────────────────────────────────────
rclone listremotes | grep -q '^proton:' || {
    echo "Error: rclone remote 'proton:' missing." >&2
    exit 1
}

# ─── 4) Identities ────────────────────────────────────────────────────────────
GH_USER="$(gh api user --jq .login)"
USER_JSON="$(curl -sf -H "PRIVATE-TOKEN:${GITLAB_TOKEN}" https://gitlab.com/api/v4/user)" || {
    echo "Error: Failed to get GitLab user info. Check your GITLAB_TOKEN." >&2
    exit 1
}
GL_USER_ID="$(echo "$USER_JSON" | jq -r .id)"
GL_NAMESPACE="$GH_USER"

# ─── 5) List your GitHub repos ───────────────────────────────────────────────
echo "⏳ Listing GitHub repos for $GH_USER…"
mapfile -t REPOS < <(
    gh repo list "$GH_USER" --limit 1000 --json name -q '.[].name'
)

# ─── 6) Mirror & push each repo ──────────────────────────────────────────────
for repo in "${REPOS[@]}"; do
    echo
    echo "📦 Processing $repo"
    REPO_DIR="${BACKUP_DIR}/${repo}.git"

    # If missing or broken, remove & re-clone
    if [[ ! -d "$REPO_DIR" || ! -f "$REPO_DIR/HEAD" ]]; then
        [[ -d "$REPO_DIR" ]] && echo "  → Broken mirror detected; removing…" && sudo rm -rf "$REPO_DIR"
        echo "  → Cloning mirror via HTTPS…"
        git clone --mirror \
            "https://${GH_TOKEN}@github.com/${GH_USER}/${repo}.git" \
            "$REPO_DIR"
    else
        echo "  → Ensuring origin is HTTPS…"
        git --git-dir="$REPO_DIR" remote set-url origin \
            "https://${GH_TOKEN}@github.com/${GH_USER}/${repo}.git"

        echo "  → Fetching updates…"
        if ! git --git-dir="$REPO_DIR" fetch --all --prune; then
            echo "  → Fetch failed (permissions?); removing & re-cloning…"
            sudo rm -rf "$REPO_DIR"
            echo "  → Cloning mirror via HTTPS…"
            git clone --mirror \
                "https://${GH_TOKEN}@github.com/${GH_USER}/${repo}.git" \
                "$REPO_DIR"
        fi
    fi

    # Fetch or create project on GitLab
    ENCODED="$(printf '%s/%s' "$GL_NAMESPACE" "$repo" | sed 's_/_%2F_g')"
    PROJ_INFO="$(curl -s -H "PRIVATE-TOKEN:${GITLAB_TOKEN}" \
        "https://gitlab.com/api/v4/projects/${ENCODED}")"
    if ! echo "$PROJ_INFO" | jq -e .id >/dev/null; then
        echo "  → Creating $repo on GitLab…"
        PROJ_INFO="$(curl -s -H "PRIVATE-TOKEN:${GITLAB_TOKEN}" -X POST \
            "https://gitlab.com/api/v4/projects" \
            -d "name=${repo}" \
            -d "namespace_id=${GL_USER_ID}" \
            -d "visibility=private" \
            -d "import_url=https://github.com/${GH_USER}/${repo}.git")"
    fi

    PROJ_ID="$(echo "$PROJ_INFO" | jq -r .id)"
    DEFAULT_BRANCH="$(echo "$PROJ_INFO" | jq -r '.default_branch // "main"')"
    echo "  → default branch is $DEFAULT_BRANCH"

    # Determine GitLab push URL
    RAW_URL="$(echo "$PROJ_INFO" | jq -r .http_url_to_repo)"
    if [[ -z "$RAW_URL" || "$RAW_URL" == "null" ]]; then
        GITLAB_REPO_URL="https://gitlab.com/${GL_NAMESPACE}/${repo}.git"
    else
        GITLAB_REPO_URL="$RAW_URL"
    fi
    echo "  → will push to $GITLAB_REPO_URL"

    # ─── 7) Unprotect the default branch safely ──────────────────────────────────
    PROTECTED_JSON="$(curl -sf -H "PRIVATE-TOKEN:${GITLAB_TOKEN}" \
        "https://gitlab.com/api/v4/projects/${PROJ_ID}/protected_branches" ||
        echo '[]')"
    RULE_ID="$(echo "$PROTECTED_JSON" | jq -r \
        ".[] | select(.name==\"${DEFAULT_BRANCH}\") | .id")"
    if [[ -n "$RULE_ID" && "$RULE_ID" != "null" ]]; then
        echo "  → Unprotecting branch via rule ID $RULE_ID…"
        curl -s -X DELETE -H "PRIVATE-TOKEN:${GITLAB_TOKEN}" \
            "https://gitlab.com/api/v4/projects/${PROJ_ID}/protected_branches/${RULE_ID}" \
            >/dev/null || true
    fi
    echo "  → Ensuring branch unprotected by name…"
    curl -s -X DELETE -H "PRIVATE-TOKEN:${GITLAB_TOKEN}" \
        "https://gitlab.com/api/v4/projects/${PROJ_ID}/protected_branches/${DEFAULT_BRANCH}" \
        >/dev/null || true

    # ─── 8) Push all branches & tags (no deletions) ────────────────────────────
    echo "  → Pushing all branches to GitLab…"
    git --git-dir="$REPO_DIR" push --force --all \
        "https://oauth2:${GITLAB_TOKEN}@${GITLAB_REPO_URL#https://}"

    echo "  → Pushing all tags to GitLab…"
    git --git-dir="$REPO_DIR" push --force --tags \
        "https://oauth2:${GITLAB_TOKEN}@${GITLAB_REPO_URL#https://}"
done

# ─── 9) Snapshot to Proton Drive via proton-sync ─────────────────────────────
echo
echo "☁️  Syncing backup to Proton Drive…"
if ! proton-sync "$BACKUP_DIR" "proton:Backups/GitHub"; then
    echo "Error: proton-sync failed" >&2
    exit 1
fi

echo "✅ Backup complete!"
