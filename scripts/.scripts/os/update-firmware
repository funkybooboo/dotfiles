#!/usr/bin/env bash
#
# update-firmware — refresh and apply firmware updates via fwupd
#                    with logging, robust reboot detection, and retry
#
set -euo pipefail
set -o errtrace

# --- Logging ---
LOGFILE="/var/log/update-firmware.log"
exec > >(tee -a "$LOGFILE") 2>&1

# --- Timestamp helper ---
TS() { date '+%F %T'; }

# --- Sudo check ---
if ! sudo -n true 2>/dev/null; then
    echo "[$(TS)] ERROR: sudo would prompt for a password; please configure NOPASSWD for fwupdmgr and systemctl"
    exit 1
fi

# --- Error trap ---
trap 'echo "[$(TS)] ERROR: failure at line $LINENO"' ERR

# --- Lockfile to prevent overlapping runs ---
LOCKFILE=/var/lock/update-firmware.lock
exec 200>"$LOCKFILE"
flock -n 200 || {
    echo "[$(TS)] Another update-firmware is already running; exiting."
    exit 0
}

# --- Retry helper ---
retry() {
    local cmd=("$@") n=1 max=3 delay=10
    until "${cmd[@]}"; do
        ((n >= max)) && return 1
        echo "[$(TS)] WARNING: '${cmd[*]}' failed (attempt $n/$max), retrying in ${delay}s…"
        sleep $delay
        ((n++))
    done
}

echo "[$(TS)] Starting firmware update run"

# --- Ensure fwupdmgr exists ---
if ! command -v fwupdmgr >/dev/null 2>&1; then
    echo "[$(TS)] ERROR: fwupdmgr not found in PATH; aborting"
    exit 1
fi

# --- Refresh metadata ---
echo "[$(TS)] Refreshing firmware metadata"
retry sudo -n fwupdmgr refresh

# --- Check for updates ---
echo "[$(TS)] Checking for firmware updates"
updates=$(fwupdmgr get-updates 2>&1)
if echo "$updates" | grep -iqE 'no updatable|no updates'; then
    echo "[$(TS)] No firmware updates available"
    echo "[$(TS)] Finished (no updates)"
    exit 0
fi

echo "[$(TS)] Updates available:"
echo "$updates"

# --- Apply updates ---
echo "[$(TS)] Applying updates"
if ! sudo -n fwupdmgr --assumeyes update; then
    echo "[$(TS)] ERROR: fwupdmgr update failed"
    exit 1
fi
echo "[$(TS)] Firmware updates applied successfully"

# --- Detect if a reboot is required via JSON output ---
reboot_required=$(fwupdmgr get-updates --json | grep -Po '"reboot":\s*\Ktrue')
if [[ "$reboot_required" == "true" ]]; then
    echo "[$(TS)] Reboot required"

    if [ -t 0 ]; then
        read -p "[$(TS)] OK to reboot now? [y/N] " answer
        case "$answer" in
        [Yy]*)
            echo "[$(TS)] Rebooting now"
            sudo -n systemctl reboot
            ;;
        *)
            echo "[$(TS)] Reboot postponed; please reboot manually when convenient"
            exit 0
            ;;
        esac
    else
        echo "[$(TS)] Not running in a terminal; please reboot manually to complete firmware installation."
        exit 0
    fi
else
    echo "[$(TS)] No reboot required"
    echo "[$(TS)] Finished successfully"
fi

exit 0
